/**
 * This library can throw a variety of error objects, descriptive of different
 * circumstances, to allow callers to wrap error handling in translation systems.
 *
 * The most actionable / specific errors get wrapped in specific classes, but some
 * still carry generic untranslatable strings.
 */

/**
 * Base class; handles converting errors to JSON blobs and back again.
 */
class CriticalCssError extends Error {
	constructor( type, data ) {
		super( type.getMessage( data ) );

		this.type = type;
		this.data = data;
	}

	/**
	 * Returns the type of error as a string.
	 */
	getType() {
		return this.type.name;
	}

	/**
	 * Returns true if this error object has the specified data value.
	 */
	has( key ) {
		return Object.prototype.hasOwnProperty.call( this.data, key );
	}

	/**
	 * Gets the data value with the specified key, or undefined if not defined.
	 */
	get( key ) {
		return this.data[ key ];
	}

	/**
	 * Standard JSON serialization endpoint; returns a JSON
	 * friendly object.
	 */
	toJSON() {
		return {
			type: this.type.name,
			data: this.data,
			message: this.type.getMessage( this.data ),
		};
	}

	/**
	 * Reverse of toJSON; constructs a CriticalCssError object from
	 * a previously serialized value.
	 *
	 * @param {object} jsonObject - JSON compatible object
	 */
	static fromJSON( jsonObject ) {
		const ErrorClass = CriticalCssErrorTypes[ jsonObject.type ];
		if ( ! ErrorClass ) {
			return new UnknownError( {
				message: jsonObject.message || jsonObject
			} );
		}

		return new ErrorClass( jsonObject.data );
	}
}

/**
 * UnknownError - Used for any unrecognized error.
 */
class UnknownError extends CriticalCssError {
	constructor( { message } ) {
		super( UnknownError, { message } );
	}

	static getMessage( data ) {
		return data.message;
	}
}

/**
 * HttpError - Indicates an HTTP request has failed with a non-2xx status code.
 */
class HttpError extends CriticalCssError {
	constructor( { url, code } ) {
		super( HttpError, { url, code } );
	}

	static getMessage( data ) {
		return `HTTP error ${ data.code } on URL ${ data.url }`;
	}
}

/**
 * GenericUrlError - Indicates that fetch() threw an error with its own error string.
 * Contains a raw (and difficult to translate) error message generated by fetch.
 */
class GenericUrlError extends CriticalCssError {
	constructor( { url, message } ) {
		super( GenericUrlError, { url, message } );
	}

	static getMessage( data ) {
		return `Error while loading ${ data.url }: ${ data.message }`;
	}
}

/**
 * CrossDomainError - Indicates that a requested URL failed due to CORS / security
 * limitations imposed by the browser.
 */
class CrossDomainError extends CriticalCssError {
	constructor( { url } ) {
		super( CrossDomainError, { url } );
	}

	static getMessage( data ) {
		return `Failed to fetch cross-domain content at ${ data.url }`;
	}
}

/**
 * LoadTimeoutError - Indicates that an HTTP request failed due to a timeout.
 */
class LoadTimeoutError extends CriticalCssError {
	constructor( { url } ) {
		super( LoadTimeoutError, { url } );
	}

	static getMessage( data ) {
		return `Timeout while reading ${ data.url }`;
	}
}

/**
 * RedirectError - Indicates that a requested URL failed due to an HTTP redirection of that url.
 */
class RedirectError extends CriticalCssError {
	constructor( { url, redirectUrl } ) {
		super( RedirectError, { url, redirectUrl } );
	}

	static getMessage( data ) {
		return `Failed to process ${ data.url } because it has an HTTP redirection to ${ data.redirectUrl }`;
	}
}

/**
 * UrlVerifyError - Indicates that a provided BrowserInterface verifyUrl
 * callback returned false for a page which was otherwise loaded successfully.
 */
class UrlVerifyError extends CriticalCssError {
	constructor( { url } ) {
		super( UrlVerifyError, { url } );
	}

	static getMessage( data ) {
		return `Failed to verify page at ${ data.url }`;
	}
}

/**
 * ConfigurationError - Indicates that this library was called with invalid
 * parameters.
 */
class ConfigurationError extends CriticalCssError {
	constructor( { message } ) {
		super( ConfigurationError, { message } );
	}

	static getMessage( data ) {
		return `Invalid configuraiton: ${ data.message }`;
	}
}

/**
 * InternalError - Indicates something went wrong in the guts of this library,
 * and probably represent a bug that needs to be fixed.
 */
class InternalError extends CriticalCssError {
	constructor( { message } ) {
		super( InternalError, { message } );
	}

	static getMessage( data ) {
		return `Internal error: ${ data.message }`;
	}
}

const CriticalCssErrorTypes = {
	// Detailed errors
	CrossDomainError,
	LoadTimeoutError,
	RedirectError,
	HttpError,
	UrlVerifyError,

	// Unspecific errors
	GenericUrlError,

	// Usage / internal errors
	ConfigurationError,
	InternalError,

	// External errors / unknown origin.
	UnknownError,
};

module.exports = {
	...CriticalCssErrorTypes,
	CriticalCssError,
};
